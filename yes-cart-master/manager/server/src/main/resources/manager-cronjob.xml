<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright 2009 Denys Pavlov, Igor Azarnyi
  ~
  ~    Licensed under the Apache License, Version 2.0 (the "License");
  ~    you may not use this file except in compliance with the License.
  ~    You may obtain a copy of the License at
  ~
  ~        http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~    Unless required by applicable law or agreed to in writing, software
  ~    distributed under the License is distributed on an "AS IS" BASIS,
  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~    See the License for the specific language governing permissions and
  ~    limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- ################################ Pre order inventory scanning  ###################################### -->

    <bean name="preorderJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="org.yes.cart.bulkjob.cron.YcCronJob" />
        <property name="jobDataAsMap">
            <map>
                <entry key="jobName" value="Inventory Awaiting Delivery Processing" />
                <entry key="job" value-ref="bulkAwaitingInventoryDeliveriesProcessor" />
                <entry key="nodeService" value-ref="nodeService" />
            </map>
        </property>
    </bean>

    <bean id="preOrderJobCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="preorderJob" />
        <property name="cronExpression" value="${yum.cron.preorderJob}" />
    </bean>

    <!-- ################################ Abandon shopping cart clean up  ################################### -->

    <bean name="abandonedShoppingCartJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="org.yes.cart.bulkjob.cron.YcCronJob" />
        <property name="jobDataAsMap">
            <map>
                <entry key="jobName" value="Abandoned Shopping Cart State Clean Up" />
                <entry key="job" value-ref="bulkAbandonedShoppingCartProcessor" />
                <entry key="nodeService" value-ref="nodeService" />
            </map>
        </property>
    </bean>

    <bean id="abandonedShoppingCartJobCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="abandonedShoppingCartJob" />
        <property name="cronExpression" value="${yum.cron.abandonedShoppingCartJob}" />
    </bean>

    <bean name="emptyAnonymousShoppingCartJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="org.yes.cart.bulkjob.cron.YcCronJob" />
        <property name="jobDataAsMap">
            <map>
                <entry key="jobName" value="Empty Anonymous Shopping Cart State Clean Up" />
                <entry key="job" value-ref="bulkEmptyAnonymousShoppingCartProcessor" />
                <entry key="nodeService" value-ref="nodeService" />
            </map>
        </property>
    </bean>

    <bean id="emptyAnonymousShoppingCartJobCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="emptyAnonymousShoppingCartJob" />
        <property name="cronExpression" value="${yum.cron.emptyAnonymousShoppingCartJob}" />
    </bean>


    <!-- ################################ Expired guest accounts  ########################################### -->

    <bean name="expiredGuestsJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="org.yes.cart.bulkjob.cron.YcCronJob" />
        <property name="jobDataAsMap">
            <map>
                <entry key="jobName" value="Expired Guest Accounts Clean Up" />
                <entry key="job" value-ref="bulkExpiredGuestsProcessor" />
                <entry key="nodeService" value-ref="nodeService" />
            </map>
        </property>
    </bean>

    <bean id="expiredGuestsJobCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="expiredGuestsJob" />
        <property name="cronExpression" value="${yum.cron.expiredGuestsJob}" />
    </bean>

    <!-- ################################ Customer tagging  ################################################# -->

    <bean name="customerTagJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="org.yes.cart.bulkjob.cron.YcCronJob" />
        <property name="jobDataAsMap">
            <map>
                <entry key="jobName" value="Customer Tagging" />
                <entry key="job" value-ref="bulkCustomerTagProcessor" />
                <entry key="nodeService" value-ref="nodeService" />
            </map>
        </property>
    </bean>

    <bean id="customerTagJobCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="customerTagJob" />
        <property name="cronExpression" value="${yum.cron.customerTagJob}" />
    </bean>

    <!-- ################################ Bulk email  ###################################################### -->

    <bean id="bulkMailProcessor" class="org.yes.cart.bulkjob.mail.BulkMailProcessorImpl">
        <constructor-arg index="0" ref="mailService"/>
        <constructor-arg index="1" ref="mailComposer"/>
        <constructor-arg index="2" ref="mailSenderFactory"/>
        <constructor-arg index="3" ref="systemService"/>
        <constructor-arg index="4" ref="runtimeAttributeService"/>
        <property name="delayBetweenEmailsMs" value="1000"/>
        <property name="cycleExceptionsThreshold" value="3"/>
    </bean>

    <bean name="sendMailJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="org.yes.cart.bulkjob.cron.YcCronJob" />
        <property name="jobDataAsMap">
            <map>
                <entry key="jobName" value="Send Mail" />
                <entry key="job" value-ref="bulkMailProcessor" />
                <entry key="nodeService" value-ref="nodeService" />
            </map>
        </property>
    </bean>

    <bean id="sendMailJobCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="sendMailJob" />
        <property name="cronExpression" value="${yum.cron.sendMailJob}" />
    </bean>

    <!-- ################################ Auto Import  ###################################################### -->

    <!--<bean id="autoImportListener" class="org.yes.cart.bulkjob.bulkimport.LocalFileShareImportListenerImpl">
        <constructor-arg index="0" ref="shopService"/>
        <constructor-arg index="1" ref="bulkImportService"/>
        <constructor-arg index="2" ref="reindexService"/>
        <constructor-arg index="3" ref="remoteDevService"/>
        <constructor-arg index="4" ref="systemService"/>
        <constructor-arg index="5" ref="runtimeAttributeService"/>
        <constructor-arg index="6" ref="authenticationManager"/>
    </bean>-->

    <!--<bean name="autoImportJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="org.yes.cart.bulkjob.cron.YcCronJob" />
        <property name="jobDataAsMap">
            <map>
                <entry key="jobName" value="Auto Import" />
                <entry key="job" value-ref="autoImportListener" />
                <entry key="nodeService" value-ref="nodeService" />
            </map>
        </property>
    </bean>

    <bean id="autoImportJobCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="autoImportJob" />
        <property name="cronExpression" value="${yum.cron.autoImportJob}" />
    </bean>-->

    <!-- ################################ Image scanner  ################################################### -->

<!--
    <bean id="imageVaultProcessor" class="org.yes.cart.bulkjob.images.LocalFileShareImageVaultProcessorImpl">
        <constructor-arg index="0" ref="systemService"/>
        <constructor-arg index="1" ref="ioProviderFactory"/>
        <constructor-arg index="2">
            <array>
                <ref bean="categoryImageNameStrategy"/>
                <ref bean="brandImageNameStrategy"/>
                <ref bean="productImageNameStrategy"/>
                <ref bean="shopImageNameStrategy"/>
            </array>
        </constructor-arg>
        <constructor-arg index="3">
            <array>
                <bean id="imageVaultProcessorCategoryImageImportDomainObjectStrategy" class="org.yes.cart.bulkimport.image.impl.CategoryImageImportDomainObjectStrategyImpl">
                    <constructor-arg index="0" ref="impexFederationFacade"/>
                    <constructor-arg index="1" ref="categoryService"/>
                    <constructor-arg index="2" ref="attributeService"/>
                    <property name="insertOnly" value="true"/>
                </bean>

                <bean id="imageVaultProcessorBrandImageImportDomainObjectStrategy" class="org.yes.cart.bulkimport.image.impl.BrandImageImportDomainObjectStrategyImpl">
                    <constructor-arg index="0" ref="impexFederationFacade"/>
                    <constructor-arg index="1" ref="brandService"/>
                    <constructor-arg index="2" ref="attributeService"/>
                    <property name="insertOnly" value="true"/>
                </bean>

                <bean id="imageVaultProcessorShopImageImportDomainObjectStrategy" class="org.yes.cart.bulkimport.image.impl.ShopImageImportDomainObjectStrategyImpl">
                    <constructor-arg index="0" ref="impexFederationFacade"/>
                    <constructor-arg index="1" ref="shopService"/>
                    <constructor-arg index="2" ref="attributeService"/>
                    <property name="insertOnly" value="true"/>
                </bean>

                <bean id="imageVaultProcessorProductImageImportDomainObjectStrategy" class="org.yes.cart.bulkimport.image.impl.ProductImageImportDomainObjectStrategyImpl">
                    <constructor-arg index="0" ref="impexFederationFacade"/>
                    <constructor-arg index="1" ref="productService"/>
                    <constructor-arg index="2" ref="attributeService"/>
                    <property name="insertOnly" value="true"/>
                </bean>

                <bean id="imageVaultProcessorProductSkuImageImportDomainObjectStrategy" class="org.yes.cart.bulkimport.image.impl.ProductSkuImageImportDomainObjectStrategyImpl">
                    <constructor-arg index="0" ref="impexFederationFacade"/>
                    <constructor-arg index="1" ref="productSkuService"/>
                    <constructor-arg index="2" ref="attributeService"/>
                    <property name="insertOnly" value="true"/>
                </bean>
            </array>
        </constructor-arg>
        <constructor-arg index="4" ref="reindexService"/>
        <constructor-arg index="5" ref="remoteDevService"/>
        <constructor-arg index="6" ref="runtimeAttributeService"/>
        <constructor-arg index="7" ref="authenticationManager"/>
    </bean>-->

    <!--<bean name="imageVaultProcessorJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="org.yes.cart.bulkjob.cron.YcCronJob" />
        <property name="jobDataAsMap">
            <map>
                <entry key="jobName" value="Image Vault Scanner" />
                <entry key="job" value-ref="imageVaultProcessor" />
                <entry key="nodeService" value-ref="nodeService" />
            </map>
        </property>
    </bean>-->

    <!--<bean id="imageVaultProcessorJobCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="imageVaultProcessorJob" />
        <property name="cronExpression" value="${yum.cron.imageVaultProcessorJob}" />
    </bean>-->

    <!-- ################################ Scheduler  ####################################################### -->


    <bean id="quartzSysProps1" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass"><value>java.lang.System</value></property>
        <property name="targetMethod"><value>setProperty</value></property>
        <property name="arguments">
            <list>
                <value>org.terracotta.quartz.skipUpdateCheck</value>
                <value>true</value>
            </list>
        </property>
    </bean>

    <bean id="quartzSysProps2" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass"><value>java.lang.System</value></property>
        <property name="targetMethod"><value>setProperty</value></property>
        <property name="arguments">
            <list>
                <value>org.terracotta.quartz.skipUpdateCheck</value>
                <value>true</value>
            </list>
        </property>
    </bean>

    <bean id="managerCronSchedule" class="org.springframework.scheduling.quartz.SchedulerFactoryBean"
          depends-on="quartzSysProps1,quartzSysProps2">
        <property name="triggers">
            <list>
                <ref bean="preOrderJobCronTrigger" />
                <ref bean="abandonedShoppingCartJobCronTrigger" />
                <ref bean="emptyAnonymousShoppingCartJobCronTrigger" />
                <ref bean="expiredGuestsJobCronTrigger" />
                <ref bean="customerTagJobCronTrigger" />
                <ref bean="sendMailJobCronTrigger" />
                <!--<ref bean="autoImportJobCronTrigger" />
                <ref bean="imageVaultProcessorJobCronTrigger" />-->
            </list>
        </property>
        <property name="quartzProperties">
            <props>
                <prop key="org.quartz.scheduler.skipUpdateCheck">true</prop>
                <prop key="org.terracotta.quartz.skipUpdateCheck">true</prop>
            </props>
        </property>
        <property name="startupDelay" value="10"/><!-- Give context 10sec to stabilise before starting quartz -->
    </bean>


</beans>
        
