<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright 2009 Denys Pavlov, Igor Azarnyi
  ~
  ~    Licensed under the Apache License, Version 2.0 (the "License");
  ~    you may not use this file except in compliance with the License.
  ~    You may obtain a copy of the License at
  ~
  ~        http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~    Unless required by applicable law or agreed to in writing, software
  ~    distributed under the License is distributed on an "AS IS" BASIS,
  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~    See the License for the specific language governing permissions and
  ~    limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- ########################################## bulk export ########################## -->

    <import resource="core-federation-impex.xml"/>
    <import resource="classpath:core-export.xml"/>

    <bean id="bulkExportExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <description>
            Thread pool (1, max int) for bulk exports since they may be slow.
        </description>
    </bean>

    <bean id="exportDataDescriptorResolver" class="org.yes.cart.bulkexport.service.impl.ExportDataDescriptorResolverImpl">
        <constructor-arg index="0" ref="dataGroupService"/>
        <constructor-arg index="1" ref="dataDescriptorService"/>
    </bean>

    <bean id="webInfXmlExportDataDescriptorTuplizer" class="org.yes.cart.bulkexport.service.impl.WebInfXmlExportDataDescriptorTuplizerImpl">
        <constructor-arg index="0" value="export-descriptor"/>
        <property name="dataDescriptorResolver" ref="exportDataDescriptorResolver"/>
        <property name="exportDescriptorXStreamProvider" ref="exportDescriptorXStreamProvider"/>
    </bean>


    <bean id="customerOrderPaymentImpexFederationFilter" class="org.yes.cart.service.federation.impl.CustomerOrderPaymentImpexFederationFilterImpl">
        <constructor-arg index="0" ref="shopFederationStrategy"/>
        <constructor-arg index="1">
            <list>
                <value>ROLE_SMADMIN</value>
                <value>ROLE_SMSHOPADMIN</value>
            </list>
        </constructor-arg>
    </bean>

    <bean id="impexPaymentFederationFacade" class="org.yes.cart.service.federation.impl.ImpexFederationFacadeImpl">
        <constructor-arg index="0" ref="shopFederationStrategy"/>
        <constructor-arg index="1">
            <map>
                <entry key="org.yes.cart.payment.persistence.entity.CustomerOrderPayment"       value-ref="customerOrderPaymentImpexFederationFilter"/>
            </map>
        </constructor-arg>
    </bean>

    <bean id="paymentGenericDao" class="org.yes.cart.dao.impl.GenericDAOHibernateImpl">
        <constructor-arg><value>java.lang.Object</value></constructor-arg>
        <constructor-arg type="org.yes.cart.dao.EntityFactory" ref="internalEntityFactory"/>
        <property name="sessionFactory" ref="paySessionFactory"/>
    </bean>


    <bean id="csvBulkPaymentExportService" parent="txPayProxyTemplate">
        <property name="target">
            <bean  class="org.yes.cart.bulkexport.csv.impl.CsvBulkExportServiceImpl" scope="prototype">
                <constructor-arg index="0" ref="impexPaymentFederationFacade"/>
                <property name="genericDAO" ref="paymentGenericDao"/>
                <property name="columnLookUpQueryParameterStrategy" ref="exportCsvColumnLookUpQueryStrategy"/>
                <property name="valueDataAdapter" ref="exportCsvExportValueAdapter"/>
                <property name="valueLanguageAdapter" ref="exportCsvLanguageValueAdapter"/>
            </bean>
        </property>
    </bean>

    <bean id="bulkExportService" class="org.yes.cart.bulkexport.service.impl.ExportDirectorImplService">
        <description>
            Export descriptor groups define set of descriptor that should be used.

            It is recommended to craft these sets according to business model of the company
            to maximise performance.
        </description>
        <constructor-arg index="0" value="${fs.config.bulkexport.absolute.export.root}"/>
        <constructor-arg index="1" ref="exportDataDescriptorResolver"/>
        <constructor-arg index="2" ref="bulkExportExecutor"/>
        <constructor-arg index="3" ref="nodeService"/>
        <constructor-arg index="4" ref="webAppManagerAsyncContextFactory"/>
        <constructor-arg index="5" ref="systemService"/>
        <constructor-arg index="6" ref="uiFederationFacade"/>

        <lookup-method name="getNewBulkExportService" bean="csvBulkExportService"/>
        <lookup-method name="getNewBulkPaymentExportService" bean="csvBulkPaymentExportService"/>
        <lookup-method name="getNewBulkExportImagesService" bean="imagesBulkExportService"/>

    </bean>


    <!-- ########################################## order export ########################## -->

    <bean id="emailNotificationOrderExporter" class="org.yes.cart.orderexport.mail.EmailNotificationOrderExporterImpl">
        <constructor-arg ref="aspectExecutor"/>
        <constructor-arg index="1" type="org.yes.cart.service.theme.ThemeService" ref="themeService"/>
        <constructor-arg index="2" type="org.yes.cart.service.domain.MailService" ref="mailService"/>
        <constructor-arg index="3" type="org.yes.cart.service.mail.MailComposer" ref="mailComposer"/>
        <constructor-arg index="4" type="org.yes.cart.service.domain.CustomerService" ref="customerService"/>
        <constructor-arg index="5" type="org.yes.cart.service.domain.ShopService" ref="shopService"/>
        <constructor-arg index="6" type="org.yes.cart.service.domain.ProductSkuService" ref="productSkuService"/>
        <constructor-arg index="7">
            <map>
                <!--
                    There are 3 mappings: in progress is normal flow, partially shipped and completed are for orders
                    containing electronic delivery
                 -->
                <entry key="os.in.progress"         value="sup-order-new"/>
                <entry key="os.partially.shipped"   value="sup-order-new"/>
                <entry key="os.completed"           value="sup-order-new"/>
            </map>
        </constructor-arg>
        <property name="orderAutoExportListener" ref="orderAutoExportProcessorInternal"/>
        <property name="exporterId" value="EMAIL"/>
        <property name="priority" value="100"/>
    </bean>


</beans>
        
