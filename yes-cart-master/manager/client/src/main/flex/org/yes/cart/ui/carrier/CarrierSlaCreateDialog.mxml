<?xml version="1.0" encoding="utf-8"?>
<!--
  - Copyright 2009 Denys Pavlov, Igor Azarnyi
  -
  -    Licensed under the Apache License, Version 2.0 (the "License");
  -    you may not use this file except in compliance with the License.
  -    You may obtain a copy of the License at
  -
  -        http://www.apache.org/licenses/LICENSE-2.0
  -
  -    Unless required by applicable law or agreed to in writing, software
  -    distributed under the License is distributed on an "AS IS" BASIS,
  -    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  -    See the License for the specific language governing permissions and
  -    limitations under the License.
  -->

<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:yci18n="org.yes.cart.ui.i18n.*"
                creationComplete="init()"
                creationCompleteEffect="Zoom"
                title="@Resource(bundle='CarrierManagementPanel',key='newCarrierSlaDialogTitle')"
                showCloseButton="true"
                close="PopUpManager.removePopUp(this)"
                width="500">

    <mx:Form>
        <mx:FormItem width="100%" label="@Resource(bundle='CarrierManagementPanel',key='code')">
            <mx:TextInput width="195" id="ccode"/>
        </mx:FormItem>
        <mx:FormItem width="100%" label="@Resource(bundle='CarrierManagementPanel',key='name')">
            <mx:TextInput width="195" id="cname"/>
        </mx:FormItem>
        <mx:FormItem  width="100%" label="@Resource(bundle='CarrierManagementPanel',key='displayName')">
            <yci18n:i18nStringField id="displayNames"/>
        </mx:FormItem>
        <mx:FormItem width="100%" label="@Resource(bundle='CarrierManagementPanel',key='description')">
            <mx:TextArea width="195" id="description"/>
        </mx:FormItem>
        <mx:FormItem  width="100%" label="@Resource(bundle='CarrierManagementPanel',key='displayDescription')">
            <yci18n:i18nStringField id="displayDescriptions"/>
        </mx:FormItem>
        <mx:FormItem width="100%" label="@Resource(bundle='CarrierManagementPanel',key='maxDays')">
            <mx:TextInput width="195" id="maxDays"/>
        </mx:FormItem>
        <mx:FormItem width="100%">
            <mx:HBox>
                <mx:CheckBox id="billingAddressNotRequired"/>  <mx:Label text="@Resource(bundle='CarrierManagementPanel',key='billingAddressNotRequired')"/>
            </mx:HBox>
        </mx:FormItem>
        <mx:FormItem width="100%">
            <mx:HBox>
                <mx:CheckBox id="deliveryAddressNotRequired"/>  <mx:Label text="@Resource(bundle='CarrierManagementPanel',key='deliveryAddressNotRequired')"/>
            </mx:HBox>
        </mx:FormItem>

        <mx:FormItem width="100%" label="@Resource(bundle='CarrierManagementPanel',key='slaType')">
            <mx:ComboBox id="slaTypeComboBox"
                         change="slaTypeChangeEvt(event)"
                         prompt="@Resource(bundle='CarrierManagementPanel',key='selectSlaType')"
                         width="195"
                         dataProvider="{slaTypes}"
                    />
        </mx:FormItem>

        <mx:FormItem id="scriptFormItem" width="100%"
                     label="@Resource(bundle='CarrierManagementPanel',key='script')"
                     toolTip="@Resource(bundle='CarrierManagementPanel',key='scriptHint')"
                >
            <mx:TextInput width="195" id="script"
                          toolTip="@Resource(bundle='CarrierManagementPanel',key='scriptHint')"/>
        </mx:FormItem>

    </mx:Form>
    <mx:ControlBar horizontalAlign="right" width="100%">
        <mx:Button id="saveBtn" label="@Resource(bundle='ShopManagerApplication',key='save')"/>
        <mx:Button id="closeBtn" label="@Resource(bundle='ShopManagerApplication',key='close')"
                   click="PopUpManager.removePopUp(this)"/>
    </mx:ControlBar>


    <mx:Script><![CDATA[
        import org.yes.cart.impl.CarrierSlaDTOImpl;

        import mx.binding.utils.BindingUtils;
        import mx.managers.PopUpManager;
        import mx.utils.StringUtil;

        public var newCarrierSlaFlag:Boolean;
        private var _carrierSlaDTOImpl:CarrierSlaDTOImpl;
        [Bindable]
        private var slaTypes:Array;

        public function get carrierSlaDTOImpl():CarrierSlaDTOImpl {
            return _carrierSlaDTOImpl;
        }

        public function set carrierSlaDTOImpl(value:CarrierSlaDTOImpl):void {
            _carrierSlaDTOImpl = value;
        }


        private function init():void {
            slaTypes = new Array();
            slaTypes.push(new SlaType("F", resourceManager.getString('CarrierManagementPanel', 'slaTypeFixed')));
            slaTypes.push(new SlaType("R", resourceManager.getString('CarrierManagementPanel', 'slaTypeFree')));
            slaTypes.push(new SlaType("W", resourceManager.getString('CarrierManagementPanel', 'slaTypeWeightVolume')));
            slaTypes.push(new SlaType("E", resourceManager.getString('CarrierManagementPanel', 'slaTypeExternal')));

            if (newCarrierSlaFlag) {
                this.title = resourceManager.getString('CarrierManagementPanel', 'newCarrierSlaDialogTitle');
                saveBtn.label = resourceManager.getString('CarrierManagementPanel', 'create');
            } else {
                this.title = resourceManager.getString('CarrierManagementPanel', 'editCarrierSlaDialogTitle');
                saveBtn.label = resourceManager.getString('CarrierManagementPanel', 'update');


                for each (var slaType:SlaType in slaTypeComboBox.dataProvider) {
                    if (slaType.data == _carrierSlaDTOImpl.slaType) {
                        slaTypeComboBox.selectedItem = slaType;
                        break;
                    }
                }
            }

            displayNames.setSourceObject(_carrierSlaDTOImpl, 'displayNames');
            displayDescriptions.setSourceObject(_carrierSlaDTOImpl, 'displayDescriptions');

            BindingUtils.bindProperty(this.ccode, "text", _carrierSlaDTOImpl, "code");
            BindingUtils.bindProperty(this.cname, "text", _carrierSlaDTOImpl, "name");
            BindingUtils.bindProperty(this.description, "text", _carrierSlaDTOImpl, "description");
            BindingUtils.bindProperty(this.script, "text", _carrierSlaDTOImpl, "script");
            BindingUtils.bindProperty(this.maxDays, "text", _carrierSlaDTOImpl, "maxDays");
            BindingUtils.bindProperty(this.billingAddressNotRequired, "selected", _carrierSlaDTOImpl, "billingAddressNotRequired");
            BindingUtils.bindProperty(this.deliveryAddressNotRequired, "selected", _carrierSlaDTOImpl, "deliveryAddressNotRequired");

            BindingUtils.bindProperty(_carrierSlaDTOImpl, "code", this.ccode, "text");
            BindingUtils.bindProperty(_carrierSlaDTOImpl, "name", this.cname, "text");
            BindingUtils.bindProperty(_carrierSlaDTOImpl, "description", this.description, "text");
            BindingUtils.bindProperty(_carrierSlaDTOImpl, "script", this.script, "text");
            BindingUtils.bindProperty(_carrierSlaDTOImpl, "maxDays", this.maxDays, "text");
            BindingUtils.bindProperty(_carrierSlaDTOImpl, "billingAddressNotRequired", this.billingAddressNotRequired, "selected");
            BindingUtils.bindProperty(_carrierSlaDTOImpl, "deliveryAddressNotRequired", this.deliveryAddressNotRequired, "selected");

            changeControlsVisibility(_carrierSlaDTOImpl.slaType);


        }

        public function updateModel():void {

            if (slaTypeComboBox.selectedItem != null) {

                _carrierSlaDTOImpl.slaType = SlaType(slaTypeComboBox.selectedItem).data;

            }

        }

        public static function isBlank(str:String):Boolean {
            return (str == null || StringUtil.trim(str).length == 0);
        }

        private function slaTypeChangeEvt(event:Event):void {

            if (slaTypeComboBox.selectedItem != null) {

                _carrierSlaDTOImpl.slaType = SlaType(event.currentTarget.selectedItem).data;

            }
            changeControlsVisibility(_carrierSlaDTOImpl.slaType);
        }

        private function changeControlsVisibility(slaType:String):void {

            scriptFormItem.includeInLayout = scriptFormItem.visible = false;

            if ("F" == slaType) { // fixed

            } else if ("R" == slaType) { // free

            } else if ("E" == slaType) { //external
                scriptFormItem.includeInLayout = scriptFormItem.visible = true;
            }
        }
        ]]>
    </mx:Script>
</mx:TitleWindow>