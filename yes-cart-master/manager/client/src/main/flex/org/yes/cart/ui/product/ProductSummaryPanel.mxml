<?xml version="1.0" encoding="utf-8"?>
<!--
  - Copyright 2009 Denys Pavlov, Igor Azarnyi
  -
  -    Licensed under the Apache License, Version 2.0 (the "License");
  -    you may not use this file except in compliance with the License.
  -    You may obtain a copy of the License at
  -
  -        http://www.apache.org/licenses/LICENSE-2.0
  -
  -    Unless required by applicable law or agreed to in writing, software
  -    distributed under the License is distributed on an "AS IS" BASIS,
  -    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  -    See the License for the specific language governing permissions and
  -    limitations under the License.
  -->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:yci18n="org.yes.cart.ui.i18n.*" width="100%" height="100%" xmlns:georg="com.georg.*">


    <mx:ArrayCollection id="productAvailability"/>

    <mx:HBox>
        <mx:Form width="100%">
            <mx:FormItem label="@Resource(bundle='ProductManagementPanel',key='guid')">
                <mx:TextInput id="guidTextInput" width="300" enabled="{allowChangeCode}" focusOut="onGuidChange(event)"/>
            </mx:FormItem>
            <mx:FormItem label="@Resource(bundle='ProductManagementPanel',key='code')">
                <mx:TextInput id="codeTextInput" width="300" enabled="{allowChangeCode}" focusOut="onCodeChange(event)"/>
            </mx:FormItem>
            <mx:FormItem label="@Resource(bundle='ProductManagementPanel',key='manufacturerCode')">
                <mx:TextInput id="manCodeTextInput" width="300" />
            </mx:FormItem>
            <mx:FormItem label="@Resource(bundle='ProductManagementPanel',key='featured')">
                <mx:CheckBox id="featuredCheckBox"/>
            </mx:FormItem>
            <mx:FormItem label="@Resource(bundle='ProductManagementPanel',key='brand')">
                <mx:HBox>
                    <mx:TextInput id="brandLabel" width="150" editable="false"/>
                    <mx:Button id="selectBrandBtn" width="30"
                               label="..."
                               toolTip="@Resource(bundle='ProductManagementPanel',key='selectBrandPropmt')"
                               click="onBrandSelectedClick(event);"
                            />
                </mx:HBox>
            </mx:FormItem>
            <mx:FormItem label="@Resource(bundle='ProductManagementPanel',key='type')">
                <mx:HBox>
                    <mx:TextInput id="productTypeLabel" width="150" editable="false"/>
                    <mx:Button id="selectProductTypeBtn" width="30"
                               label="..."
                               toolTip="@Resource(bundle='ProductManagementPanel',key='selectProductType')"
                               click="onProductTypeSelectedClick(event);"
                            />
                </mx:HBox>
            </mx:FormItem>

            <mx:FormItem label="@Resource(bundle='ProductManagementPanel',key='productAvailability')">
                <mx:ComboBox id="productAvailabilityComboBox" width="200"
                             dataProvider="{productAvailability}"
                             labelField="name"
                             change="onProductAvailabilityChanged(event)"
                             prompt="@Resource(bundle='ProductManagementPanel',key='selectAvailability')"
                        />
            </mx:FormItem>

            <mx:FormItem width="100%"
                         label="@Resource(bundle='ProductManagementPanel',key='availableFrom')">
                <mx:HBox>
                    <georg:DateTimeField id="productAvailableFromDateField" width="125"/>
                    <mx:Button
                            visible="{productAvailableFromDateField.selectedDate != null}"
                            label="@Resource(bundle='ProductManagementPanel',key='clearDate')"
                            toolTip="@Resource(bundle='ProductManagementPanel',key='clearFromDate')"
                            click="productAvailableFromDateField.selectedDate = null;"/>
                </mx:HBox>
            </mx:FormItem>
            <mx:FormItem width="100%"
                         label="@Resource(bundle='ProductManagementPanel',key='availableTo')">
                <mx:HBox>
                    <georg:DateTimeField id="productAvailableToDateField" width="125"/>
                    <mx:Button
                            visible="{productAvailableToDateField.selectedDate != null}"
                            label="@Resource(bundle='ProductManagementPanel',key='clearDate')"
                            toolTip="@Resource(bundle='ProductManagementPanel',key='clearToDate')"
                            click="productAvailableToDateField.selectedDate = null;"/>
                </mx:HBox>
            </mx:FormItem>
            <mx:FormItem width="100%"
                         label="@Resource(bundle='ProductManagementPanel',key='minOrderQuantity')">
                <mx:HBox>
                    <mx:TextInput id="minOrderQuantity" width="125"/>
                    <mx:Button
                            visible="{minOrderQuantity.text != null}"
                            label="@Resource(bundle='ProductManagementPanel',key='clearOrderQuantity')"
                            click="minOrderQuantity.text = null;"/>
                </mx:HBox>
            </mx:FormItem>
            <mx:FormItem width="100%"
                         label="@Resource(bundle='ProductManagementPanel',key='maxOrderQuantity')">
                <mx:HBox>
                    <mx:TextInput id="maxOrderQuantity" width="125"/>
                    <mx:Button
                            visible="{maxOrderQuantity.text != null}"
                            label="@Resource(bundle='ProductManagementPanel',key='clearOrderQuantity')"
                            click="maxOrderQuantity.text = null;"/>
                </mx:HBox>
            </mx:FormItem>
            <mx:FormItem width="100%"
                         label="@Resource(bundle='ProductManagementPanel',key='stepOrderQuantity')">
                <mx:HBox>
                    <mx:TextInput id="stepOrderQuantity" width="125"/>
                    <mx:Button
                            visible="{stepOrderQuantity.text != null}"
                            label="@Resource(bundle='ProductManagementPanel',key='clearOrderQuantity')"
                            click="stepOrderQuantity.text = null;"/>
                </mx:HBox>
            </mx:FormItem>
        </mx:Form>

        <mx:Form width="100%">

            <mx:FormItem label="@Resource(bundle='ProductManagementPanel',key='name')">
                <mx:TextInput id="nameTextInput" width="300"/>
            </mx:FormItem>
            <mx:FormItem label="@Resource(bundle='ProductManagementPanel',key='displayName')">
                <yci18n:i18nStringField id="displayNames" change="onDisplayNamesChange(event)"/>
            </mx:FormItem>
            <mx:FormItem label="@Resource(bundle='ProductManagementPanel',key='description')">
                <mx:TextArea id="descriptionTextInput" width="300"/>
            </mx:FormItem>

            <mx:FormItem label="@Resource(bundle='ProductManagementPanel',key='tag')">
                <mx:TextInput id="tagTextInput" width="300"/>
            </mx:FormItem>

            <mx:FormItem label="@Resource(bundle='ProductManagementPanel',key='pimCode')">
                <mx:TextInput id="pimCodeTextInput" width="300"/>
            </mx:FormItem>

            <mx:FormItem width="100%">
                <mx:Button width="150"
                           enabled="{productDTOImplChanged}"
                           label="@Resource(bundle='ProductManagementPanel',key='save')"
                           toolTip="@Resource(bundle='ProductManagementPanel',key='saveHint')"
                           click="saveProductChanges(event)"/>

            </mx:FormItem>

        </mx:Form>

    </mx:HBox>

    <mx:RemoteObject showBusyCursor="true" id="remoteProductService" destination="remoteProductService"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">


        <mx:method id="isGuidAvailableForProduct" name="isGuidAvailableForProduct"
                   result="onGuidAvailableForProductResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="isCodeAvailableForProduct" name="isCodeAvailableForProduct"
                   result="onCodeAvailableForProductResult(event)"
                   fault="onRpcMethodFault(event)"/>

    </mx:RemoteObject>


    <mx:ArrayCollection id="propertyWatchers"/>

    <mx:Boolean id="allowChangeCode">false</mx:Boolean>
    <mx:Boolean id="productDTOImplChanged">false</mx:Boolean>

    <mx:Script><![CDATA[
        import mx.binding.utils.BindingUtils;
        import mx.binding.utils.ChangeWatcher;
        import mx.controls.Alert;
        import mx.core.FlexGlobals;
        import mx.events.FlexEvent;
        import mx.events.PropertyChangeEvent;
        import mx.managers.PopUpManager;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;
        import mx.utils.ObjectUtil;

        import org.yes.cart.event.DtoEvent;
        import org.yes.cart.impl.BrandDTOImpl;

        import org.yes.cart.impl.ProductDTOImpl;
        import org.yes.cart.impl.ProductTypeDTOImpl;
        import org.yes.cart.shopmanager.ShopManagerGlobal;
        import org.yes.cart.ui.brand.BrandFinderDialog;
        import org.yes.cart.ui.producttype.ProductTypeFinderDialog;
        import org.yes.cart.util.DataModelUtils;
        import org.yes.cart.util.DomainUtils;

        [Bindable]
        private var _productDTOImpl:ProductDTOImpl;

        private var brandFinderPopUp:BrandFinderDialog;
        private var productTypeFinderPopUp:ProductTypeFinderDialog;

        public function get productDTOImpl():ProductDTOImpl {
            return _productDTOImpl;
        }

        public function set productDTOImpl(value:ProductDTOImpl):void {
            unbindProperties();
            _productDTOImpl = value;
            allowChangeCode = DomainUtils.isPersistentPK(_productDTOImpl.productId);
            bindProperties();
            if (guidTextInput != null) {
                guidTextInput.errorString = '';
            }
            if (codeTextInput != null) {
                codeTextInput.errorString = '';
            }
        }

        private function onDisplayNamesChange(event:FlexEvent):void {
            productDTOImplChanged = true;
        }

        private function saveProductChanges(event:MouseEvent):void {
            dispatchEvent(new DtoEvent(DtoEvent.UPDATE, _productDTOImpl));
            productDTOImplChanged = false;
        }

        private function unbindProperties():void {
            for each (var watcher:ChangeWatcher in propertyWatchers) {
                watcher.unwatch();
            }
            propertyWatchers.removeAll();
            displayNames.setSourceObject(null, null);
        }


        private function onProductAvailabilityChanged(event:Event):void {
            _productDTOImpl.availability = productAvailabilityComboBox.selectedItem.data;
            onProductDTOChanged(null);
        }

        private function bindProperties():void {
            


            try {

                displayNames.setSourceObject(_productDTOImpl, 'displayNames');

                propertyWatchers.addItem(BindingUtils.bindProperty(guidTextInput, "text", _productDTOImpl, "guid"));
                propertyWatchers.addItem(BindingUtils.bindProperty(codeTextInput, "text", _productDTOImpl, "code"));
                propertyWatchers.addItem(BindingUtils.bindProperty(manCodeTextInput, "text", _productDTOImpl, "manufacturerCode"));
                propertyWatchers.addItem(BindingUtils.bindProperty(nameTextInput, "text", _productDTOImpl, "name"));
                propertyWatchers.addItem(BindingUtils.bindProperty(tagTextInput, "text", _productDTOImpl, "tag"));
                propertyWatchers.addItem(BindingUtils.bindProperty(pimCodeTextInput, "text", _productDTOImpl, "pimCode"));
                propertyWatchers.addItem(BindingUtils.bindProperty(descriptionTextInput, "text", _productDTOImpl, "description"));
                propertyWatchers.addItem(BindingUtils.bindProperty(productAvailableFromDateField, "selectedDate", _productDTOImpl, "availablefrom"));
                propertyWatchers.addItem(BindingUtils.bindProperty(productAvailableToDateField, "selectedDate", _productDTOImpl, "availableto"));
                propertyWatchers.addItem(BindingUtils.bindProperty(featuredCheckBox, "selected", _productDTOImpl, "featured"));
                propertyWatchers.addItem(BindingUtils.bindProperty(productAvailabilityComboBox, "selectedItem", _productDTOImpl, "availability"));
                propertyWatchers.addItem(BindingUtils.bindProperty(minOrderQuantity, "text", _productDTOImpl, "minOrderQuantityS"));
                propertyWatchers.addItem(BindingUtils.bindProperty(maxOrderQuantity, "text", _productDTOImpl, "maxOrderQuantityS"));
                propertyWatchers.addItem(BindingUtils.bindProperty(stepOrderQuantity, "text", _productDTOImpl, "stepOrderQuantityS"));

                for (var i:int =0 ; i < productAvailabilityComboBox.dataProvider.length; i++) {
                    if (productAvailabilityComboBox.dataProvider[i].data == _productDTOImpl.availability) {
                        productAvailabilityComboBox.selectedIndex = i;
                        break;
                    }
                }

                brandLabel.text = _productDTOImpl.brandDTO.name;
                productTypeLabel.text = _productDTOImpl.productTypeDTO.name;

                propertyWatchers.addItem(BindingUtils.bindProperty(_productDTOImpl, "guid", guidTextInput, "text"));
                propertyWatchers.addItem(BindingUtils.bindProperty(_productDTOImpl, "code", codeTextInput, "text"));
                propertyWatchers.addItem(BindingUtils.bindProperty(_productDTOImpl, "manufacturerCode", manCodeTextInput, "text"));
                propertyWatchers.addItem(BindingUtils.bindProperty(_productDTOImpl, "name", nameTextInput, "text"));
                propertyWatchers.addItem(BindingUtils.bindProperty(_productDTOImpl, "tag", tagTextInput, "text"));
                propertyWatchers.addItem(BindingUtils.bindProperty(_productDTOImpl, "pimCode", pimCodeTextInput, "text"));
                propertyWatchers.addItem(BindingUtils.bindProperty(_productDTOImpl, "description", descriptionTextInput, "text"));
                propertyWatchers.addItem(BindingUtils.bindProperty(_productDTOImpl, "availablefrom", productAvailableFromDateField, "selectedDate"));
                propertyWatchers.addItem(BindingUtils.bindProperty(_productDTOImpl, "availableto", productAvailableToDateField, "selectedDate"));
                propertyWatchers.addItem(BindingUtils.bindProperty(_productDTOImpl, "featured", featuredCheckBox, "selected"));
                propertyWatchers.addItem(BindingUtils.bindProperty(_productDTOImpl, "minOrderQuantityS", minOrderQuantity, "text"));
                propertyWatchers.addItem(BindingUtils.bindProperty(_productDTOImpl, "maxOrderQuantityS", maxOrderQuantity, "text"));
                propertyWatchers.addItem(BindingUtils.bindProperty(_productDTOImpl, "stepOrderQuantityS", stepOrderQuantity, "text"));


                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "guid", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "code", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "manufacturerCode", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "pimCode", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "uri", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "title", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "metakeywords", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "metadescription", onProductDTOChanged));

                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "tag", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "name", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "description", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "availablefrom", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "availableto", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "featured", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "brandDTO", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "productTypeDTO", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "availability", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "minOrderQuantityS", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "maxOrderQuantityS", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "stepOrderQuantityS", onProductDTOChanged));

            } catch(e:Error) {

                Alert.show("" + e.toString());

            }




        }

        private function onProductDTOChanged(event:PropertyChangeEvent):void {
            productDTOImplChanged = true;
        }


        private function onGuidChange(event:Event):void {
            remoteProductService.isGuidAvailableForProduct(guidTextInput.text, _productDTOImpl.productId);
        }

        private function onCodeChange(event:Event):void {
            remoteProductService.isCodeAvailableForProduct(codeTextInput.text, _productDTOImpl.productId);
        }

        protected function onRpcMethodFault(event:FaultEvent):void {
            ShopManagerGlobal.instance.defaultOnRpcMethodFault(event);
        }

        private function onGuidAvailableForProductResult(event:ResultEvent):void {
            var _available:Boolean = Boolean(event.result);
            if (_available) {
                guidTextInput.errorString = '';
            } else {
                guidTextInput.errorString = resourceManager.getString('ProductManagementPanel', 'guidIsNotAvailable', [ guidTextInput.text ]);
            }
        }

        private function onCodeAvailableForProductResult(event:ResultEvent):void {
            var _available:Boolean = Boolean(event.result);
            if (_available) {
                codeTextInput.errorString = '';
            } else {
                codeTextInput.errorString = resourceManager.getString('ProductManagementPanel', 'codeIsNotAvailable', [ codeTextInput.text ]);
            }
        }




        private function onProductTypeSelectedClick(event:MouseEvent):void {
            productTypeFinderPopUp = ProductTypeFinderDialog(PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), ProductTypeFinderDialog, true));
            productTypeFinderPopUp.selectProductTypeButton.addEventListener(MouseEvent.CLICK, onProductTypeSelectedClickConfirm);
            PopUpManager.centerPopUp(productTypeFinderPopUp);
        }

        private function onProductTypeSelectedClickConfirm(event:Event):void {
            if (productTypeFinderPopUp != null) {
                var types:Array = productTypeFinderPopUp.productTypeSelection;
                if (types.length > 0) {
                    var _type:ProductTypeDTOImpl = ProductTypeDTOImpl(types[0]);
                    _productDTOImpl.productTypeDTO = _type;
                    productTypeLabel.text = _type.name;
                }
                productTypeFinderPopUp.selectProductTypeButton.removeEventListener(MouseEvent.CLICK, onProductTypeSelectedClickConfirm);
                PopUpManager.removePopUp(productTypeFinderPopUp);
                productTypeFinderPopUp = null;
            }
        }


        private function onBrandSelectedClick(event:MouseEvent):void {
            brandFinderPopUp = BrandFinderDialog(PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), BrandFinderDialog, true));
            brandFinderPopUp.selectBrandButton.addEventListener(MouseEvent.CLICK, onBrandSelectedClickConfirm);
            PopUpManager.centerPopUp(brandFinderPopUp);
        }

        private function onBrandSelectedClickConfirm(event:Event):void {
            if (brandFinderPopUp != null) {
                var brands:Array = brandFinderPopUp.brandSelection;
                if (brands.length > 0) {
                    var _brand:BrandDTOImpl = BrandDTOImpl(brands[0]);
                    _productDTOImpl.brandDTO = _brand;
                    brandLabel.text = _brand.name;
                }
                brandFinderPopUp.selectBrandButton.removeEventListener(MouseEvent.CLICK, onBrandSelectedClickConfirm);
                PopUpManager.removePopUp(brandFinderPopUp);
                brandFinderPopUp = null;
            }
        }


        ]]></mx:Script>

</mx:VBox>
