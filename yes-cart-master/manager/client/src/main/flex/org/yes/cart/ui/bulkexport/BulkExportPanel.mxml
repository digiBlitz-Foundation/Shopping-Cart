<?xml version="1.0" encoding="utf-8"?>
<!--
  - Copyright 2009 Denys Pavlov, Igor Azarnyi
  -
  -    Licensed under the Apache License, Version 2.0 (the "License");
  -    you may not use this file except in compliance with the License.
  -    You may obtain a copy of the License at
  -
  -        http://www.apache.org/licenses/LICENSE-2.0
  -
  -    Unless required by applicable law or agreed to in writing, software
  -    distributed under the License is distributed on an "AS IS" BASIS,
  -    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  -    See the License for the specific language governing permissions and
  -    limitations under the License.
  -->

<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           width="100%"
           height="100%"
           creationComplete="initExportPanel()">

    <mx:Script>
		<![CDATA[
        import com.hexagonstar.util.debug.Debug;

        import mx.controls.Alert;
        import mx.events.CloseEvent;

        import org.yes.cart.impl.JobStatusImpl;

        import org.yes.cart.shopmanager.ShopManagerGlobal;

        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        [Bindable]
        private var csv:ByteArray;

        private var reportHeaderText:String;
        private var exportJobToken:String;

        private var importStatusTimer:Timer = new Timer(15000, 1); // 15 sec timer

        private var _exportCompletedListener:Function;

        protected function onExportResult(event:ResultEvent):void {
            Debug.trace("INFO Bulk export result is " + bulkExportService.doExport.lastResult);
            exportJobToken = event.result as String;
            jobToken.text = exportJobToken;
            reportHeaderText += resourceManager.getString("BulkExportPanel", "exportToken", [exportJobToken]) +
                    '\n' + event.result;
            resultDetails.text = reportHeaderText;
            Debug.trace("INFO current state is readyToExport");
            importStatusTimer.start(); // start the status update timer
        }


        protected function onExportFault(event:FaultEvent):void {
            Debug.trace("FAULT Bulk export fault");
            Debug.traceObj(event);

            var msg:String = resourceManager.getString("BulkExportPanel", "exportFailed") +
                    '\n' + event.fault.faultDetail;

            Alert.show(resourceManager.getString('ShopManagerApplication', 'error'), msg);
            reportHeaderText += msg;
            resultDetails.text += reportHeaderText;

            Debug.trace("INFO current state is readyToExport");
        }

        protected function onExportClick(event:Event):void {
            reportHeaderText = '';
            downloadBtn.enabled = false;
            bulkExportService.doExport(this.exportGroups.selectedItem['name'], fileToExport.text, true); // result is full server filename with path
        }

        private function onWatchClick(event:MouseEvent):void {
            if (jobToken.text != null) {
                reportHeaderText = "";
                exportJobToken = jobToken.text;
                bulkExportService.getExportStatus(exportJobToken);
            }
        }

        private function initExportPanel():void {

            importStatusTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onStatusTimerComplete);
            bulkExportService.getExportGroups(resourceManager.getString('Common', 'localeFilter'));

        }

        private function onStatusTimerComplete(event:TimerEvent):void {
            if (exportJobToken != null) {
                bulkExportService.getExportStatus(exportJobToken);
            }
        }

        private function onGetExportStatusResult(event:ResultEvent):void {
            var status:JobStatusImpl = event.result as JobStatusImpl;
            resultDetails.text = reportHeaderText + '\n' + status.report;
            if (status.state == 'INPROGRESS' || status.state == 'STARTED') {
                importStatusTimer.start(); // do another timed status update
            } else if (_exportCompletedListener != null) {
                exportBtn.enabled = true;
                downloadBtn.enabled = fileToExport.text != null && fileToExport.text != '';
                _exportCompletedListener();
                Alert.show(resourceManager.getString('BulkExportPanel', 'checkStatusSuccess', [exportJobToken]),
                        resourceManager.getString('ShopManagerApplication', 'info'));
            }

        }

        private function onGetExportStatusFault(event:FaultEvent):void {
            importStatusTimer.stop();
            Alert.show(resourceManager.getString('BulkExportPanel', 'checkStatusFailed', [exportJobToken, event.fault.faultDetail]),
                    resourceManager.getString('ShopManagerApplication', 'error'),
                    Alert.YES | Alert.CANCEL, this, onGetExportStatusFaultTryAgain, null, Alert.YES);
        }

        private function onGetExportStatusFaultTryAgain(event:CloseEvent):void {
            if (event.detail == Alert.YES) {
                exportBtn.enabled = true;
                importStatusTimer.start();
            }
        }

        private function onGetExportGroupsResult(event:ResultEvent):void {
            this.exportGroups.dataProvider = event.result;
        }

        private function onGetExportGroupsFault(event:FaultEvent):void {
            // do nothing
        }

        public function get exportCompletedListener():Function {
            return _exportCompletedListener;
        }

        public function set exportCompletedListener(value:Function):void {
            _exportCompletedListener = value;
        }

        protected function onRpcMethodFault(event:FaultEvent):void {
            ShopManagerGlobal.instance.defaultOnRpcMethodFault(event);
        }

        private function onFileNameChange(event:Event):void {
            csv = null;
            downloadBtn.enabled = fileToExport.text != null && fileToExport.text != '';
        }

        private function onDownloadClick(event:MouseEvent):void {
            if (fileToExport.text != null && fileToExport.text != '') {
                remoteDownloadService.download(fileToExport.text);
            } else {
                downloadBtn.enabled = false;
            }
        }

        private function onDownloadResult(event:ResultEvent):void {
            csv = ByteArray(event.result);
            Alert.show(
                    resourceManager.getString("BulkExportPanel", "csvReadyToSave"),
                    resourceManager.getString("ShopManagerApplication", "info"),
                    Alert.YES | Alert.NO, null, onDownloadCsvClick, null, Alert.NO);
        }


        /**
         * Save csv to disk.
         * @param event  mouse event
         */
        private function onDownloadCsvClick(event:CloseEvent):void {
            if (event.detail == Alert.YES) { //save
                //http://forums.adobe.com/message/3614898
                var _file:String = fileToExport.text;
                if (fileToExport.text.lastIndexOf('/') != -1) {
                    _file = fileToExport.text.substr(fileToExport.text.lastIndexOf('/') + 1);
                } else if (fileToExport.text.lastIndexOf('\\') != -1) {
                    _file = fileToExport.text.substr(fileToExport.text.lastIndexOf('\\') + 1);
                }

                var _ext:String = '.zip';
                if (_file.indexOf(_ext, _file.length - _ext.length) === -1) {
                    _file = _file + _ext;
                }

                new FileReference().save(
                        csv,
                        _file
                );
                csv = null;
            }
        }

        ]]>
	</mx:Script>


    <mx:RemoteObject showBusyCursor="true" id="bulkExportService" destination="bulkExportService"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">

        <mx:method id="doExport" name="doExport"
                   result="onExportResult(event)"
                   fault="onExportFault(event)"/>

        <mx:method id="getExportGroups" name="getExportGroups"
                   result="onGetExportGroupsResult(event)"
                   fault="onGetExportGroupsFault(event)"/>

        <mx:method id="getExportStatus" name="getExportStatus"
                   result="onGetExportStatusResult(event)"
                   fault="onGetExportStatusFault(event)"/>

    </mx:RemoteObject>

    <mx:RemoteObject showBusyCursor="true" id="remoteDownloadService"
                     destination="remoteDownloadService"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">
        <mx:makeObjectsBindable>true</mx:makeObjectsBindable>

        <mx:method id="download" name="download"
                   result="onDownloadResult(event)"
                   fault="onRpcMethodFault(event)"/>

    </mx:RemoteObject>


    <mx:Panel id="bulkExportPanel" height="100%" width="100%" title="@Resource(bundle='BulkExportPanel',key='title')"
              paddingLeft="2" paddingTop="2" paddingRight="2" paddingBottom="2">
        <mx:VBox width="100%" height="100%">

            <mx:Text width="100%" text="@Resource(bundle='BulkExportPanel',key='description')"/>

            <mx:Form width="100%" height="160">
                <mx:FormHeading label="@Resource(bundle='BulkExportPanel',key='exportMessage')"/>
                <mx:FormItem label="@Resource(bundle='BulkExportPanel',key='selectGroup')">
                    <mx:HBox>
                        <mx:ComboBox id="exportGroups" width="350" labelField="label"/>
                        <mx:Button id="exportBtn" label="@Resource(bundle='BulkExportPanel',key='export')"
                                   click="onExportClick(event)"/>
                    </mx:HBox>
                </mx:FormItem>
                <mx:FormItem label="@Resource(bundle='BulkExportPanel',key='overrideSingleFile')">
                    <mx:HBox>
                        <mx:TextInput id="fileToExport" width="350" change="onFileNameChange(event)"/>
                        <mx:Button id="downloadBtn" label="@Resource(bundle='BulkExportPanel',key='download')"
                                   click="onDownloadClick(event)" enabled="false"/>
                    </mx:HBox>
                </mx:FormItem>
                <mx:FormItem label="@Resource(bundle='BulkExportPanel',key='jobToken')">
                    <mx:HBox>
                        <mx:TextInput id="jobToken" width="350"/>
                        <mx:Button id="watchBtn" label="@Resource(bundle='BulkExportPanel',key='watch')"
                                   click="onWatchClick(event)"/>
                    </mx:HBox>
                </mx:FormItem>

            </mx:Form>

            <mx:TextArea id="resultDetails" width="100%" height="100%"/>
        </mx:VBox>
    </mx:Panel>


</mx:Canvas>
